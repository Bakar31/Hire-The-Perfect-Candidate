import re
from preparing_to_train import train_df, test_df

# train features
train_df['words_counts'] = train_df['resumes'].apply(lambda x: len(str(x).split()))
train_df['char_counts'] = train_df['resumes'].apply(lambda x: len(str(x)))
train_df['avg_word_len'] = train_df['char_counts']/train_df['words_counts']
train_df['ml_counts'] = train_df['resumes'].apply(lambda x: len(re.findall('machine learning', x)))
train_df['ml_engineer_counts'] = train_df['resumes'].apply(lambda x: len(re.findall('machine learning engineer', x)))
train_df['analytics_counts'] = train_df['resumes'].apply(lambda x: len(re.findall('analytics', x)))
train_df['degree_counts'] = train_df['resumes'].apply(lambda x: len(re.findall('master degree', x)))
train_df['degree_counts_2'] = train_df['resumes'].apply(lambda x: len(re.findall('msc', x)))
train_df['degree_counts_3'] = train_df['resumes'].apply(lambda x: len(re.findall('degree', x)))
train_df['deep_learning_counts'] = train_df['resumes'].apply(lambda x: len(re.findall('deep learning', x)))
train_df['tf_counts'] = train_df['resumes'].apply(lambda x: len(re.findall('tensorflow', x)))
train_df['neural_network_counts'] = train_df['resumes'].apply(lambda x: len(re.findall('neural network', x)))
train_df['nlp_counts'] = train_df['resumes'].apply(lambda x: len(re.findall('natural language processing', x)))
train_df['nlp_counts_2'] = train_df['resumes'].apply(lambda x: len(re.findall('nlp', x)))
train_df['pyspark_counts'] = train_df['resumes'].apply(lambda x: len(re.findall('pyspark', x)))
train_df['hadoop_counts'] = train_df['resumes'].apply(lambda x: len(re.findall('hadoop', x)))
train_df['data_analysis_counts'] = train_df['resumes'].apply(lambda x: len(re.findall('data analysis', x)))
train_df['lustering_counts'] = train_df['resumes'].apply(lambda x: len(re.findall('clustering', x)))
train_df['lr_counts'] = train_df['resumes'].apply(lambda x: len(re.findall('logistic regression', x)))
train_df['classification_counts'] = train_df['resumes'].apply(lambda x: len(re.findall('classification', x)))
train_df['sk_counts'] = train_df['resumes'].apply(lambda x: len(re.findall('sciKit learn', x)))
train_df['pytorch_counts'] = train_df['resumes'].apply(lambda x: len(re.findall('pytorch', x)))
train_df['cnn_counts'] = train_df['resumes'].apply(lambda x: len(re.findall('cnn', x)))
train_df['rnn_counts'] = train_df['resumes'].apply(lambda x: len(re.findall('rnn', x)))
train_df['gans_counts'] = train_df['resumes'].apply(lambda x: len(re.findall('gans', x)))
train_df['nltk_counts'] = train_df['resumes'].apply(lambda x: len(re.findall('nltk', x)))
train_df['spacy_counts'] = train_df['resumes'].apply(lambda x: len(re.findall('spacy', x)))
train_df['transformer_counts'] = train_df['resumes'].apply(lambda x: len(re.findall('transformer', x)))
train_df['django_counts'] = train_df['resumes'].apply(lambda x: len(re.findall('django', x)))


# test features
test_df['words_counts'] = test_df['resumes'].apply(lambda x: len(str(x).split()))
test_df['char_counts'] = test_df['resumes'].apply(lambda x: len(str(x)))
test_df['avg_word_len'] = test_df['char_counts']/train_df['words_counts']
test_df['ml_counts'] = test_df['resumes'].apply(lambda x: len(re.findall('machine learning', x)))
test_df['ml_engineer_counts'] = test_df['resumes'].apply(lambda x: len(re.findall('machine learning engineer', x)))
test_df['analytics_counts'] = test_df['resumes'].apply(lambda x: len(re.findall('analytics', x)))
test_df['degree_counts'] = test_df['resumes'].apply(lambda x: len(re.findall('master degree', x)))
test_df['degree_counts_2'] = test_df['resumes'].apply(lambda x: len(re.findall('msc', x)))
test_df['degree_counts_3'] = test_df['resumes'].apply(lambda x: len(re.findall('degree', x)))
test_df['deep_learning_counts'] = test_df['resumes'].apply(lambda x: len(re.findall('deep learning', x)))
test_df['tf_counts'] = test_df['resumes'].apply(lambda x: len(re.findall('tensorflow', x)))
test_df['neural_network_counts'] = test_df['resumes'].apply(lambda x: len(re.findall('neural network', x)))
test_df['nlp_counts'] = test_df['resumes'].apply(lambda x: len(re.findall('natural language processing', x)))
test_df['nlp_counts_2'] = test_df['resumes'].apply(lambda x: len(re.findall('nlp', x)))
test_df['pyspark_counts'] = test_df['resumes'].apply(lambda x: len(re.findall('pyspark', x)))
test_df['hadoop_counts'] = test_df['resumes'].apply(lambda x: len(re.findall('hadoop', x)))
test_df['data_analysis_counts'] = test_df['resumes'].apply(lambda x: len(re.findall('data analysis', x)))
test_df['lustering_counts'] = test_df['resumes'].apply(lambda x: len(re.findall('clustering', x)))
test_df['lr_counts'] = test_df['resumes'].apply(lambda x: len(re.findall('logistic regression', x)))
test_df['classification_counts'] = test_df['resumes'].apply(lambda x: len(re.findall('classification', x)))
test_df['sk_counts'] = test_df['resumes'].apply(lambda x: len(re.findall('sciKit learn', x)))
test_df['pytorch_counts'] = test_df['resumes'].apply(lambda x: len(re.findall('pytorch', x)))
test_df['cnn_counts'] = test_df['resumes'].apply(lambda x: len(re.findall('cnn', x)))
test_df['rnn_counts'] = test_df['resumes'].apply(lambda x: len(re.findall('rnn', x)))
test_df['gans_counts'] = test_df['resumes'].apply(lambda x: len(re.findall('gans', x)))
test_df['nltk_counts'] = test_df['resumes'].apply(lambda x: len(re.findall('nltk', x)))
test_df['spacy_counts'] = test_df['resumes'].apply(lambda x: len(re.findall('spacy', x)))
test_df['transformer_counts'] = test_df['resumes'].apply(lambda x: len(re.findall('transformer', x)))
test_df['django_counts'] = test_df['resumes'].apply(lambda x: len(re.findall('django', x)))


print(train_df.shape)
print(test_df.shape)